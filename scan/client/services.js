// Generated by CoffeeScript 1.8.0
(function() {
  app.factory("resource", function($resource) {
    return $resource("http://" + domain + "/api/:api/:id", {}, {
      get: {
        method: "GET",
        headers: {
          "User-Role": "freelancer"
        }
      },
      posts: {
        method: "POST",
        headers: {
          "User-Role": "freelancer"
        }
      }
    });
  });

  app.factory("connect", function(resource, loader) {
    return {
      load: function(settings, result, error) {
        loader.loading = true;
        if (settings.type === "get") {
          return resource[settings.type]({
            api: settings.params.api,
            id: settings.params.id,
            data: settings.data
          }, function(res) {
            loader.loading = false;
            return result(angular.fromJson(res.data));
          }, function(err) {
            loader.loading = false;
            return error(err);
          });
        } else if (settings.type === "posts") {
          return resource[settings.type]({
            api: settings.params.api,
            id: settings.params.id
          }, {
            data: settings.data
          }, function(res) {
            loader.loading = false;
            return result(res.data);
          }, function(err) {
            loader.loading = false;
            return error(err);
          });
        }
      }
    };
  });

  app.factory("parser", function() {
    var Parser;
    Parser = (function() {
      function Parser() {}

      Parser.prototype.objToMassive = function(obj) {
        var massive;
        massive = [];
        angular.forEach(obj, function(item) {
          if (item.id) {
            item.id = ~~item.id;
          }
          return massive.push(item);
        });
        return massive;
      };

      return Parser;

    })();
    return new Parser;
  });

  app.factory("message", function() {
    var Message;
    Message = (function() {
      function Message() {}

      Message.prototype.setNeutral = function(message) {
        this.clear();
        return this.neutral = message;
      };

      Message.prototype.setSuccess = function(message) {
        this.clear();
        return this.success = message;
      };

      Message.prototype.setError = function(message) {
        this.clear();
        return this.error = message;
      };

      Message.prototype.clear = function() {
        delete this.error;
        delete this.success;
        return delete this.neutral;
      };

      return Message;

    })();
    return new Message();
  });

  app.factory("loader", function() {
    var Loader;
    Loader = (function() {
      var ths;

      ths = null;

      function Loader() {
        ths = this;
      }

      return Loader;

    })();
    return new Loader();
  });

  app.factory("events", function(connect, $q, parser) {
    var Events;
    Events = (function() {
      var ths;

      ths = null;

      function Events() {
        ths = this;
      }

      Events.prototype.load = function() {
        var defer;
        defer = $q.defer();
        connect.load({
          type: "get",
          params: {
            api: "event"
          }
        }, function(eventList) {
          ths.eventList = parser.objToMassive(eventList);
          ths.activeEvent = ths.eventList[0];
          return defer.resolve();
        }, function(eventError) {
          return defer.reject(eventError);
        });
        return defer.promise;
      };

      Events.prototype.clear = function() {
        delete this.eventList;
        return delete this.activeEvent;
      };

      return Events;

    })();
    return new Events();
  });

  app.factory("participants", function(connect, $q, parser, events, $filter, scroll, message, lyric) {
    var Participants;
    Participants = (function() {
      var lastLength, ths;

      ths = null;

      function Participants() {
        this.filteredList = [];
        ths = this;
      }

      Participants.prototype.load = function() {
        var defer;
        defer = $q.defer();
        connect.load({
          type: "get",
          params: {
            api: "participant"
          },
          data: {
            event_id: events.activeEvent.id,
            approval_status: 2
          }
        }, function(participantsList) {
          return defer.resolve(parser.objToMassive(participantsList));
        }, function(participantsError) {
          return defer.reject(participantsError);
        });
        return defer.promise;
      };

      Participants.prototype.loadProfile = function(participant) {
        var defer;
        defer = $q.defer();
        connect.load({
          type: "get",
          params: {
            api: "participant"
          },
          data: {
            id: participant.id,
            extraParam: "detailView"
          }
        }, function(participantProfile) {
          return defer.resolve(parser.objToMassive(participantProfile)[0]);
        }, function(profileError) {
          return defer.reject(profileError);
        });
        return defer.promise;
      };

      Participants.prototype.updateParticipant = function(participant) {
        var defer;
        defer = $q.defer();
        connect.load({
          type: "get",
          params: {
            api: "participant"
          },
          data: {
            id: participant.id
          }
        }, function(participantCheckedin) {
          participantCheckedin = parser.objToMassive(participantCheckedin);
          angular.forEach(ths.participantsList, function(participant, i) {
            if (participant.id === participantCheckedin[0].id) {
              ths.participantsList[i].checkedin_time = participantCheckedin[0].checkedin_time;
              return ths.participantsList[i].status = "checkedin";
            }
          });
          angular.forEach(ths.filteredList, function(participant, i) {
            if (participant.id === participantCheckedin[0].id) {
              ths.filteredList[i].checkedin_time = participantCheckedin[0].checkedin_time;
              return ths.filteredList[i].status = "checkedin";
            }
          });
          ths.addChecinsCount();
          defer.resolve();
          return ths.checkins = false;
        }, function(error) {
          message.setError(lyric.dynamic.t("message_3", {
            var1: error.status,
            var2: error.statusText
          }));
          defer.reject();
          return ths.checkins = false;
        });
        return defer.promise;
      };

      Participants.prototype.updateChecinsCount = function() {
        var checkinsCount;
        checkinsCount = 0;
        angular.forEach(this.participantsList, function(participant) {
          if (participant.status === "checkedin") {
            return checkinsCount++;
          }
        });
        return this.participantsList.checkidins = checkinsCount;
      };

      Participants.prototype.addChecinsCount = function() {
        return this.participantsList.checkidins++;
      };

      Participants.prototype.checkin = function(participant) {
        var defer;
        this.checkins = true;
        defer = $q.defer();
        message.setNeutral(lyric.constant.message_8);
        connect.load({
          type: "posts",
          params: {
            api: "participantCheckin"
          },
          data: {
            participant_id: participant.id
          }
        }, function(data) {
          return ths.updateParticipant(participant).then(function(data) {
            return defer.resolve();
          }, function(error) {
            return defer.reject();
          });
        }, function(error) {
          message.setError(lyric.dynamic.t("message_3", {
            var1: error.status,
            var2: error.statusText
          }));
          return ths.updateParticipant(participant).then(function(data) {
            return defer.resolve();
          }, function(error) {
            return defer.reject();
          });
        });
        return defer.promise;
      };

      lastLength = void 0;

      Participants.prototype.filter = function(searchString) {
        var filteredList;
        lastLength = this.filteredList.length;
        filteredList = $filter('filter')(this.participantsList, function(participant) {
          if (searchString) {
            if (participant.barcode.toLowerCase().indexOf(searchString) !== -1 || participant.first_name.toLowerCase().indexOf(searchString) !== -1 || participant.last_name.toLowerCase().indexOf(searchString) !== -1 || participant.company_name.toLowerCase().indexOf(searchString) !== -1) {
              return true;
            }
          } else {
            return true;
          }
        });
        if (filteredList && this.participantsList) {
          scroll.scrollList(filteredList.length, lastLength);
        }
        if (filteredList) {
          return this.filteredList = filteredList;
        }
      };

      Participants.prototype.clear = function() {
        delete this.participantsList;
        this.filteredList = [];
        delete this.searchString;
        delete this.refresh;
        delete this.activeParticipant;
        return delete this.lastParticipantActive;
      };

      return Participants;

    })();
    return new Participants();
  });

  app.factory("scroll", function($timeout) {
    var Scroll;
    Scroll = (function() {
      var ths;

      ths = null;

      function Scroll(elements, scrollCoords) {
        this.elements = elements != null ? elements : [];
        this.scrollCoords = scrollCoords != null ? scrollCoords : [];
        ths = this;
      }

      Scroll.prototype.setElement = function(element) {
        return this.elements.push(element);
      };

      Scroll.prototype.scrollElement = function() {
        angular.forEach(this.elements, function(element) {
          return element.coord = element.selector.getBoundingClientRect().top + element.selector.getBoundingClientRect().height;
        });
        return window.addEventListener("scroll", function(event) {
          var scrollTop;
          event.stopPropagation();
          scrollTop = window.document.body.scrollTop;
          return angular.forEach(ths.elements, function(element) {
            var classList;
            classList = element.selector.classList;
            if (element.coord < scrollTop && !classList.contains("scroll")) {
              return classList.add("scroll");
            } else if (element.coord >= scrollTop && classList.contains("scroll")) {
              return classList.remove("scroll");
            }
          });
        });
      };

      Scroll.prototype.scrollList = function(newLength, lastLength) {
        if (newLength < lastLength) {
          return this.scrollCoords.push(window.document.body.scrollTop);
        } else if (newLength > lastLength && this.scrollCoords.length) {
          return $timeout(function() {
            document.body.scrollTop = ths.scrollCoords[ths.scrollCoords.length - 1];
            return ths.scrollCoords.length = ths.scrollCoords.length - 1;
          });
        }
      };

      Scroll.prototype.clear = function() {
        return angular.forEach(this.elements, function(element) {
          var classList;
          classList = element.selector.classList;
          if (classList.contains("scroll")) {
            return classList.remove("scroll");
          }
        });
      };

      return Scroll;

    })();
    return new Scroll();
  });

  app.factory("freelancer", function(connect, auth, parser, message, scroll, $timeout, events, participants, print, lyric, $q) {
    var Freelancer;
    Freelancer = (function() {
      var ths;

      ths = null;

      function Freelancer() {
        ths = this;
      }

      Freelancer.prototype.clearAuthData = function() {
        delete this.username;
        return delete this.password;
      };

      Freelancer.prototype.setProfile = function(profile) {
        this.profile = profile != null ? profile : profile;
      };

      Freelancer.prototype.setCredentials = auth.setCredentials;

      Freelancer.prototype.clearCredentials = auth.clearCredentials;

      Freelancer.prototype.login = function() {
        var defer;
        defer = $q.defer();
        this.setCredentials(this.username, this.password);
        connect.load({
          type: "get",
          params: {
            api: "login"
          }
        }, function(profile) {
          message.setSuccess(lyric.dynamic.t("message_8", {
            var1: profile.username
          }));
          ths.setProfile(profile);
          return events.load().then(function(eventsList) {
            message.setSuccess(lyric.dynamic.t("message_9", {
              var1: events.activeEvent.event_name
            }));
            return participants.load().then(function(participantsList) {
              message.setSuccess(lyric.dynamic.t("message_10", {
                var1: events.activeEvent.event_name
              }));
              participants.participantsList = participantsList;
              participants.filter();
              participants.updateChecinsCount();
              ths.clearAuthData();
              $timeout(function() {
                return scroll.scrollElement();
              });
              return defer.resolve();
            }, function(participantsError) {
              message.setError(lyric.dynamic.t("message_3", {
                var1: participantsError.status,
                var2: participantsError.statusText
              }));
              $timeout(function() {
                return ths.logout();
              }, 6000);
              return defer.reject();
            });
          }, function(eventsError) {
            message.setError(lyric.dynamic.t("message_3", {
              var1: eventsError.status,
              var2: eventsError.statusText
            }));
            ths.clearCredentials();
            return defer.reject();
          });
        }, function(authError) {
          message.setError(lyric.dynamic.t("message_3", {
            var1: authError.status,
            var2: authError.statusText
          }));
          ths.clearCredentials();
          return defer.reject();
        });
        return defer.promise;
      };

      Freelancer.prototype.logout = function() {
        message.setNeutral(lyric.constant.message_6);
        delete this.profile;
        events.clear();
        scroll.clear();
        participants.clear();
        this.clearCredentials();
        return print.clear();
      };

      return Freelancer;

    })();
    return new Freelancer();
  });

  app.factory("storage", function() {
    return {
      setJSON: function(key, value) {
        if (key && value) {
          return localStorage.setItem(key, JSON.stringify(value));
        }
      },
      getJSON: function(key) {
        if (key) {
          return JSON.parse(localStorage.getItem(key));
        }
      },
      contain: function(key) {
        if (key) {
          if (localStorage[key]) {
            return true;
          }
        }
      }
    };
  });

  app.factory("alertt", function($timeout, message) {
    var Alertt;
    Alertt = (function() {
      var container, element, ths;

      ths = null;

      function Alertt() {
        ths = this;
        this.scroll = {
          top: void 0
        };
      }

      element = document.querySelector(".alert");

      Alertt.prototype.updatePosition = function() {
        var delta;
        delta = (innerHeight - element.getBoundingClientRect().height) / 2;
        if (delta > 0) {
          return ths.scroll.top = scrollY + delta + "px";
        } else {
          return ths.scroll.top = scrollY + "px";
        }
      };

      container = [];

      Alertt.prototype.toggle = function(name) {
        var index, last, state;
        index = container.indexOf(name);
        state = {
          name: null,
          pre: null
        };
        if (index === -1) {
          container.push(name);
          state.name = name;
          if (container.length > 1) {
            state.pre = container[container.length - 2];
          } else {
            state.pre = null;
          }
        } else {
          if (container.length > 1) {
            state.pre = container[container.length - 1];
            if (name === container[container.length - 1]) {
              container.length = container.length - 1;
            } else {
              last = container[container.length - 1];
              container[container.length - 1] = container[container.length - 2];
              container[container.length - 2] = last;
            }
            state.name = container[container.length - 1];
          } else {
            state.pre = container[container.length - 1];
            container.length = 0;
          }
        }
        return state;
      };

      return Alertt;

    })();
    return new Alertt();
  });

  app.factory("print", function($sce, $filter) {
    var Print;
    Print = (function() {
      var ths;

      ths = null;

      function Print() {
        ths = this;
        this.complateProfile = {};
        this.printSettings = {};
        this.passiveList = void 0;
      }

      Print.prototype.addComplateProfile = function(profile) {
        var priority;
        priority = 0;
        this.complateProfile = [
          {
            name: "first_name"
          }, {
            name: "last_name"
          }, {
            name: "middle_name"
          }, {
            name: "email"
          }, {
            name: "mobilephone"
          }, {
            name: "company_name"
          }, {
            name: "city"
          }, {
            name: "country"
          }, {
            name: "comments"
          }, {
            name: "birthday"
          }, {
            name: "department"
          }, {
            name: "gender"
          }
        ];
        angular.forEach(this.complateProfile, function(field) {
          var label, name;
          name = field.name;
          if (name === "first_name" || name === "last_name") {
            ({
              status: "active"
            });
          } else {
            ({
              status: "passive"
            });
          }
          label = field.name.replace("_", " ");
          field.label = label.slice(0, 1).toUpperCase() + label.slice(1);
          field.priority = priority++;
          field.bold = "False";
          field.makeRemove = true;
          return field.name = name;
        });
        return angular.forEach(profile.options, function(option) {
          option.label = option.label.replace(/<[^>]*>/g, "");
          return ths.complateProfile.push({
            label: option.label,
            bold: "False",
            priority: priority++,
            status: "passive",
            makeRemove: true,
            name: option.label
          });
        });
      };

      Print.prototype.printSetting = function(profile) {
        var priority;
        if (!this.printSettings[profile.form_id]) {
          priority = 0;
          this.printSettings[profile.form_id] = {
            activeField: [],
            passiveField: []
          };
          return angular.forEach(this.complateProfile, function(field) {
            if (field.name === "first_name" || field.name === "last_name") {
              return ths.printSettings[profile.form_id].activeField.push(field);
            } else {
              return ths.printSettings[profile.form_id].passiveField.push(field);
            }
          });
        }
      };

      Print.prototype.getField = function(field, profile) {
        var result;
        result = "";
        angular.forEach(profile, function(value, label) {
          if (field.name === label) {
            if (value) {
              result = value;
              return field.isLabel = false;
            } else {
              return angular.forEach(ths.complateProfile, function(data) {
                if (field.name === data.name) {
                  result = data.label;
                  return field.isLabel = true;
                }
              });
            }
          }
        });
        angular.forEach(profile.options, function(option) {
          var valueType;
          if (field.name === option.label) {
            valueType = Object.prototype.toString.call(option.value).slice(8, -1);
            if (valueType === "Object") {
              if (option.label === "Kryss her for å delta på middag") {
                result = "*";
                return field.isLabel = false;
              } else {
                angular.forEach(option.value, function(value) {
                  return result += value + (result.length ? "\n" : "");
                });
                return field.isLabel = false;
              }
            } else if (valueType === "Array") {
              if (!option.value.length) {
                result = option.label;
                return field.isLabel = true;
              } else {
                if (option.label === "Kryss her for å delta på middag") {
                  result = "*";
                  return field.isLabel = false;
                } else {
                  angular.forEach(option.value, function(value) {
                    return result += value + (result.length ? "\n" : "");
                  });
                  return field.isLabel = false;
                }
              }
            } else if (valueType === "Boolean") {
              if (option.label === "Kryss her for å delta på middag" && option.value) {
                result = "*";
                field.isLabel = false;
              } else {
                result = option.label;
              }
              if (option.value) {
                return field.isLabel = false;
              } else {
                return field.isLabel = true;
              }
            } else {
              if (option.value) {
                result = option.value;
                return field.isLabel = false;
              } else {
                result = option.label;
                return field.isLabel = true;
              }
            }
          }
        });
        return $sce.trustAsHtml(result);
      };

      Print.prototype.passiveVisible = function() {
        return this.passiveList = !this.passiveList;
      };

      Print.prototype.makeBold = function(field) {
        if (field.bold === "True") {
          return field.bold = "False";
        } else {
          return field.bold = "True";
        }
      };

      Print.prototype.toActiveSettings = function($index, field, formId) {
        this.printSettings[formId].activeField.push(this.printSettings[formId].passiveField[$index]);
        this.printSettings[formId].passiveField.splice($index, 1);
        this.printSettings[formId].activeField = $filter('orderBy')(this.printSettings[formId].activeField, "priority");
        return field.status = "active";
      };

      Print.prototype.toPassiveSettings = function($index, field, formId) {
        this.printSettings[formId].passiveField.push(this.printSettings[formId].activeField[$index]);
        this.printSettings[formId].activeField.splice($index, 1);
        this.printSettings[formId].passiveField = $filter('orderBy')(this.printSettings[formId].passiveField, "priority");
        return field.status = "passive";
      };

      Print.prototype.priorityDown = function($index, formId) {
        var fieldPriority;
        fieldPriority = this.printSettings[formId].activeField[$index].priority;
        this.printSettings[formId].activeField[$index].priority = this.printSettings[formId].activeField[$index + 1].priority;
        this.printSettings[formId].activeField[$index + 1].priority = fieldPriority;
        this.printSettings[formId].activeField = $filter('orderBy')(this.printSettings[formId].activeField, "priority");
        return fieldPriority = null;
      };

      Print.prototype.priorityUp = function($index, formId) {
        var fieldPriority;
        fieldPriority = this.printSettings[formId].activeField[$index].priority;
        this.printSettings[formId].activeField[$index].priority = this.printSettings[formId].activeField[$index - 1].priority;
        this.printSettings[formId].activeField[$index - 1].priority = fieldPriority;
        this.printSettings[formId].activeField = $filter('orderBy')(this.printSettings[formId].activeField, "priority");
        return fieldPriority = null;
      };

      Print.prototype.clear = function() {
        return delete this.complateProfile;
      };

      return Print;

    })();
    return new Print();
  });

}).call(this);
